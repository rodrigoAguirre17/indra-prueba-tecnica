Resources:
  PlanetsDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: planetaId
          AttributeType: S
      KeySchema:
        - AttributeName: planetaId
          KeyType: HASH
      ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
      TableName: ${self:custom.planetsTable}

  PlanetsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/service-role/"
      Policies: 
        - PolicyName: 'PolicyMain'
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow" 
                Action: 
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - Fn::GetAtt: [PlanetsDynamoDBTable, "Arn"]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:logs'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'log-group:/aws/lambda/*:*:*'
      RoleName: "PlanetsDynamoDBPermissions"